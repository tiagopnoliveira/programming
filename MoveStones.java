import java.lang.Math;
import java.util.HashMap;

public class MoveStones {

	// https://community.topcoder.com/stat?c=problem_statement&pm=14174

	//~ Problem Statement
			
	//~ There are n piles of stones arranged around a circle. The piles are numbered 0 through n-1, in order. In other words: For each valid i, piles i and i+1 are adjacent. Piles 0 and n-1 are also adjacent.

	//~ You are given two int[]s a and b, each with n elements. For each i, a[i] is the current number of stones in pile i, and b[i] is the desired number of stones for this pile. You want to move some stones to create the desired configuration. In each step you can take any single stone from any pile and move the stone to any adjacent pile. Find and return the smallest number of steps needed to create the desired configuration, or -1 if the desired distribution of stones cannot be reached.

	 
	//~ Definition
			
	//~ Class:	MoveStones
	//~ Method:	get
	//~ Parameters:	int[], int[]
	//~ Returns:	long
	//~ Method signature:	long get(int[] a, int[] b)
	//~ (be sure your method is public)
		
	 
	//~ Notes
	//~ -	At any moment during the game some piles may be empty. Empty piles still remain in place. For example, if pile 5 is empty, you are not allowed to move a stone from pile 4 directly to pile 6 in a single step. Instead, you must place the stone onto the empty pile 5 first.
	 
	//~ Constraints
	//~ -	n will be between 1 and 1000, inclusive.
	//~ -	a will have exactly n elements.
	//~ -	b will have exactly n elements.
	//~ -	Each element of a and b will be between 0 and 10^9, inclusive.

	//~ private static int[] a = 
	//~ private static int[] b = 

	//~ private static int[] a = {3,1,2};
	//~ private static int[] b = {1,2,3};

	//~ private static int[] a = {10, 0, 0, 0, 10, 0, 0, 0, 0};
	//~ private static int[] b = {0, 10, 0, 0, 0, 10, 0, 0, 0};

	private static int[] a = {949098221, 78695373, 776437017, 490449910, 416242057};
	private static int[] b = {78695373, 490449910, 949098221, 776437017, 416242057};
	// Expected is 1329051159

	//~ private static int[] a = {1, 0, 0, 2, 0};
	//~ private static int[] b = {0, 3, 0, 0, 0};

	//~ private static int[] a = {};
	//~ private static int[] b = {};
	// expected is 62071000000
	
	//~ private static int[] a = {1, 0, 1, 0, 0, 0, 0, 0, 0};
	//~ private static int[] b = {0, 1, 0, 0, 0, 0, 1, 0, 0};
	// expected is 4
	
	private static HashMap<String, Long> memo;
	private static int cacheHits = 0;

    public static void main(String[] args) {
		long startTime = System.currentTimeMillis();
		// Core Function here
		System.out.println("res: " + moveStones(a,b));
		double duration = System.currentTimeMillis() - startTime;
		System.out.println();
		System.out.print("Processing time: ");
		System.out.format("%.3f", duration / 1000);
		System.out.println(" seconds.");

    }
    
    // my own very crappy n! solution
    public static long moveStones(int[] a, int[] b) {
		int[] d = new int[a.length];
		long s = 0;
		for(int i = 0; i < d.length; i++) {
			d[i] = a[i] - b[i];
			s += d[i];
		}
		if(s != 0) {
			return -1;
		}
		memo = new HashMap<String, Long>();
		return moveStonesAux(d,0);
	}
	
	public static long moveStonesAux(int[] d, long s) {
		StringBuilder memoKey = new StringBuilder();
		boolean foundNonZero = false;
		for(int i = 0; i < d.length; i++) {
			if(!foundNonZero && d[i] != 0) {
				foundNonZero = true;
			}
			memoKey.append(d[i] + ",");
		}
		if(!foundNonZero) {
			return s;
		}
		if(memo.containsKey(memoKey.toString())) {
			if(cacheHits++ % 100000 == 0) {
				System.out.println("cache hits: " + cacheHits);
			}
			return s+memo.get(memoKey.toString());
		}
		long best = Long.MAX_VALUE;
		for(int src = 0; src < d.length; src++) {
			if(d[src] <= 0) {
				continue;
			}
			for(int dst = 0; dst < d.length; dst++) {
				if(d[dst] >= 0) {
					continue;
				}
				int[] d2 = new int[d.length];
				for(int k = 0; k < d2.length; k++) {
					d2[k] = d[k];
				}
				best = Math.min(best, moveStonesAux(d2, transferStones(d2,src,dst)));
			}			
		}
		memo.put(memoKey.toString(),best);
		return s+best;
	}

	private static long transferStones(int[] d, int source, int dest) {
		int dist = Math.min(Math.abs(dest-source), Math.abs(dest-source-d.length));
		int diff = Math.min(d[source],Math.abs(d[dest]));
		d[source] -= diff;
		d[dest] += diff;
		return diff*dist;
	}

	// TopCoder n^2 solution -- Well done sir, well done.. <tips hat>
    public static long get(int[] a, int[] b) {
        long answer = Long.MAX_VALUE;
        for (int i = 0; i < a.length; i++) {
            long current = 0;
            long delta = 0;
            for (int j = i; j < i + a.length; j++) {
                int at = j;
                if (at >= a.length) {
                    at -= a.length;
                }
                delta += a[at] - b[at];
                current += Math.abs(delta);
            }
            answer = Math.min(answer, current);
        }
        return answer;
    }	
}
